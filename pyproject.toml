[build-system]
requires = ["hatchling", "hatch-fancy-pypi-readme"]
build-backend = "hatchling.build"

[project]
name = "httpx-retries"
version = "0.2.4"
description = "A retry layer for HTTPX."
requires-python = ">=3.9"
authors = [{ name = "Will Ockmore", email = "will.ockmore@gmail.com" }]
dependencies = ["httpx>=0.27.0"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Framework :: AsyncIO",
    "Framework :: Trio",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.9",
    "Topic :: Internet :: WWW/HTTP",
]
dynamic = ["readme", "license"]

[project.urls]
Changelog = "https://github.com/will-ockmore/httpx-retries/blob/master/CHANGELOG.md"
Documentation = "https://will-ockmore.github.io/httpx-retries"
Homepage = "https://github.com/will-ockmore/httpx-retries"
Source = "https://github.com/will-ockmore/httpx-retries"

[dependency-groups]
dev = [
    "httpx",
    "ruff",
    "mypy",
    "pytest",
    "pytest-asyncio",
    "mkdocs-material",
    "mkdocstrings[python]",
    "pygments",
    "coverage",
    "hatch-fancy-pypi-readme",
]

[tool.hatch.build.targets.sdist]
include = ["/httpx_retries", "/README.md", "/tests"]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"
start-after = "<!-- badges-end -->"

# Tooling configuration.

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "C4"]

[tool.ruff.lint.isort]
combine-as-imports = true

[tool.coverage.run]
source = ["httpx_retries", "tests"]
relative_files = true

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 100
exclude_lines = [
    # Allow manually specifying untestable code.
    "pragma: no cover",
    # Allow conditional imports to remain untested.
    "if sys.version_info.*",
    # Can't test type checking code.
    "if TYPE_CHECKING:",
    "@overload",
    "^\\s+\\.\\.\\.\\s*$",
]

[tool.mypy]
strict = true
show_column_numbers = true

[tool.pytest.ini_options]
testpaths = ["docs", "tests"]
console_output_style = "classic"
# Support doctests.
addopts = "--show-capture stdout --doctest-glob='*.rst' --doctest-modules"
