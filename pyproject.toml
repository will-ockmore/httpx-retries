[tool.poetry]
name = "httpx-retry"
version = "0.1.0"
description = "Intelligently retry requests with httpx"
authors = ["Will Ockmore <will.ockmore@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.8"
httpx = ">=0.27.0"

[tool.poetry.group.dev.dependencies]
httpx = "^0.27.2"
ruff = "^0.6.8"
mypy = "^1.11.2"
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
mkdocs-material = "^9.5.49"
mkdocstrings = { extras = ["python"], version = "^0.27.0" }
coverage = "^7.6.10"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Tooling configuration.

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "UP", "C4", "TID251"]

[tool.ruff.lint.isort]
known-first-party = ["wf"]

[tool.coverage.run]
source = ["httpx-retry", "tests"]
relative_files = true

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 100
exclude_lines = [
    # Allow manually specifying untestable code.
    "pragma: no cover",
    # Can't test type checking code.
    "if TYPE_CHECKING:",
    "@overload",
    "^\\s+\\.\\.\\.\\s*$",
]

[tool.mypy]
strict = true
show_column_numbers = true

[tool.pytest.ini_options]
testpaths = ["docs", "tests"]
console_output_style = "classic"
# Support doctests.
addopts = "--show-capture stdout --doctest-glob='*.rst' --doctest-modules"
